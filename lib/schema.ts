import { z } from 'zod'

// Base fragment schema
const baseFragmentSchema = z.object({
  commentary: z.string().describe(`Describe what you're about to do and the steps you want to take for generating the fragment in great detail.`),
  title: z.string().describe('Short title of the fragment. Max 3 words.'),
  description: z.string().describe('Short description of the fragment. Max 1 sentence.'),
})

// Code fragment schema (original functionality)
const codeFragmentSchema = baseFragmentSchema.extend({
  type: z.literal('code'),
  template: z.string().describe('Name of the template used to generate the fragment.'),
  additional_dependencies: z.array(z.string()).describe('Additional dependencies required by the fragment. Do not include dependencies that are already included in the template.'),
  has_additional_dependencies: z.boolean().describe('Detect if additional dependencies that are not included in the template are required by the fragment.'),
  install_dependencies_command: z.string().describe('Command to install additional dependencies required by the fragment.'),
  port: z.number().nullable().describe('Port number used by the resulted fragment. Null when no ports are exposed.'),
  file_path: z.string().describe('Relative path to the file, including the file name.'),
  code: z.string().describe('Code generated by the fragment. Only runnable code is allowed.'),
})

// Camera feed fragment schema
const cameraFeedFragmentSchema = baseFragmentSchema.extend({
  type: z.literal('camera_feed'),
  store_name: z.string().describe('Name of the store for which the camera feed is being displayed.'),
  camera_feed_url: z.string().describe('URL of the camera feed video stream.'),
  camera_locations: z.array(z.string()).describe('List of camera locations within the store (e.g., "Entrance", "Checkout", "Aisle 1").'),
})

// Dashboard fragment schema
const dashboardFragmentSchema = baseFragmentSchema.extend({
  type: z.literal('dashboard'),
  store_name: z.string().describe('Name of the store for which the dashboard is being displayed.'),
  dashboard_url: z.string().describe('URL of the dashboard displaying store metrics.'),
  dashboard_metrics: z.array(z.string()).describe('List of metrics displayed in the dashboard (e.g., "Sales Revenue", "Inventory Levels", "Customer Traffic").'),
  time_period: z.string().describe('Time period for the dashboard data (e.g., "Today", "This Week", "This Month").'),
})

// Sales data fragment schema
const salesDataFragmentSchema = baseFragmentSchema.extend({
  type: z.literal('sales_data'),
  store_name: z.string().describe('Name of the store for which the sales data is being displayed.'),
  time_period: z.string().describe('Time period for the sales data (e.g., "Today", "This Week", "This Month", "This Quarter").'),
  sales_metrics: z.array(z.string()).describe('List of sales metrics to display (e.g., "Total Revenue", "Transaction Count", "Average Order Value", "Top Products").'),
  comparison_period: z.string().optional().describe('Previous period for comparison (e.g., "Last Week", "Last Month", "Same Period Last Year").'),
})

// Staff management fragment schema
const staffManagementFragmentSchema = baseFragmentSchema.extend({
  type: z.literal('staff_management'),
  store_name: z.string().describe('Name of the store for which staff management is being displayed.'),
  management_features: z.array(z.string()).describe('List of staff management features (e.g., "Current Staff", "Task Assignment", "Break Scheduling", "Performance Tracking").'),
  shift_period: z.string().describe('Current shift period being managed (e.g., "Morning Shift", "Afternoon Shift", "Evening Shift").'),
})

// Inventory management fragment schema
const inventoryManagementFragmentSchema = baseFragmentSchema.extend({
  type: z.literal('inventory_management'),
  store_name: z.string().describe('Name of the store for which inventory management is being displayed.'),
  inventory_features: z.array(z.string()).describe('List of inventory management features (e.g., "Stock Levels", "Low Stock Alerts", "Reorder Points", "Product Categories").'),
  time_period: z.string().describe('Time period for inventory data (e.g., "Current", "This Week", "This Month").'),
})

// Cost analytics fragment schema
const costAnalyticsFragmentSchema = baseFragmentSchema.extend({
  type: z.literal('cost_analytics'),
  store_name: z.string().describe('Name of the store for which cost analytics is being displayed.'),
  cost_categories: z.array(z.string()).describe('List of cost categories to analyze (e.g., "Staff Costs", "Utilities", "Rent", "Inventory Costs", "Marketing").'),
  time_period: z.string().describe('Time period for cost analysis (e.g., "This Month", "This Quarter", "This Year").'),
})

// Help fragment schema
const helpFragmentSchema = baseFragmentSchema.extend({
  type: z.literal('help'),
})

// Union of all fragment types
export const fragmentSchema = z.discriminatedUnion('type', [
  codeFragmentSchema,
  cameraFeedFragmentSchema,
  dashboardFragmentSchema,
  salesDataFragmentSchema,
  staffManagementFragmentSchema,
  inventoryManagementFragmentSchema,
  costAnalyticsFragmentSchema,
  helpFragmentSchema,
])

export type FragmentSchema = z.infer<typeof fragmentSchema>
export type CodeFragmentSchema = z.infer<typeof codeFragmentSchema>
export type CameraFeedFragmentSchema = z.infer<typeof cameraFeedFragmentSchema>
export type DashboardFragmentSchema = z.infer<typeof dashboardFragmentSchema>
export type SalesDataFragmentSchema = z.infer<typeof salesDataFragmentSchema>
export type StaffManagementFragmentSchema = z.infer<typeof staffManagementFragmentSchema>
export type InventoryManagementFragmentSchema = z.infer<typeof inventoryManagementFragmentSchema>
export type CostAnalyticsFragmentSchema = z.infer<typeof costAnalyticsFragmentSchema>
export type HelpFragmentSchema = z.infer<typeof helpFragmentSchema>